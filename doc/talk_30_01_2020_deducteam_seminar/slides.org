* Options                                                         :noexport:
#+OPTIONS: H:2 texht:t toc:nil
#+DATE: Deducteam Seminar \newline January 30, 2020
#+Title: Functional Verification of Tezos Smart Contracts in Coq
#+Author: Bruno Bernardo, \textit{Raphaël Cauderlier}, Zhenlei Hu, Basile Pesin, Julien Tesson
#+LaTeX_Header: \institute{Nomadic Labs}
** Beamer
#+STARTUP: beamer
#+BEAMER_COLOR_THEME: default
#+BEAMER_FONT_THEME:
#+LaTeX_header: \usepackage{ wasysym }
#+LaTeX_header: \mode<beamer>{\usetheme{Darmstadt}}
#+BEAMER_HEADER: \setbeamertemplate{navigation symbols}{}
#+BEAMER_HEADER: \setbeamertemplate{footline}[frame number]
#+BEAMER_HEADER: \usetikzlibrary{svg.path}
#+BEAMER_INNER_THEME:
#+BEAMER_OUTER_THEME:
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS:

** XeLaTeX
#+LATEX_HEADER: \usepackage{fontspec} \setmainfont{FreeSerif}
** Code Listing
#+LaTeX_Header: \usepackage{listings}
#+LaTeX_Header: \usepackage{color}
#+LaTeX_Header: \lstset{basicstyle={\ttfamily\small},keywordstyle={\color{blue}}}
*** Dedukti
#+LaTeX_Header: \lstdefinelanguage{Dedukti}{alsoletter={=->:},keywords={def,Type,-->,->,=>,:=,:,.},moredelim=[s][\color{brown}]{\[}{\]},moredelim=[s][\color{red}]{(;}{;)}}
#+LaTeX_Header: \lstnewenvironment{dedukticode}
#+LaTeX_Header: {\lstset{language={Dedukti}}}{}
*** Coq
#+LaTeX_Header: \lstdefinelanguage{Coq}{backgroundcolor=\color{orange!20},alsoletter={=->:},keywords={Definition,Type,Set,Prop,Parameter,Check,Ltac,Defined,Qed,Print,Theorem,Lemma,Proof,Inductive,fun,forall,exists,let,Fixpoint,struct,match,with,in,return,Module,Record,Class,Structure,End,Canonical,if,then,else,Coercion,end},moredelim=[s][\color{red}]{(*}{*)}}
#+LaTeX_Header: \lstnewenvironment{coqcode}
#+LaTeX_Header: {\lstset{language={Coq}}}{}
*** OCaml
#+LaTeX_Header: \lstdefinelanguage{Camligo}[Objective]{Caml}{backgroundcolor=\color{yellow!50}}

*** Michelson
#+LaTeX_Header: \lstdefinelanguage{michelson}{columns=fullflexible,basicstyle=\small\tt, commentstyle=\slshape,keywords={\{,\}, DROP, DUP, SWAP, PUSH, SOME, NONE, UNIT, IF_NONE, PAIR, CAR, CDR, LEFT, RIGHT, IF_LEFT, IF_RIGHT, NIL, CONS, IF_CONS, SIZE, EMPTY_SET, EMPTY_MAP, MAP, ITER, MEM, GET, UPDATE, IF, LOOP, LOOP_LEFT, LAMBDA, EXEC, DIP, FAILWITH, CAST, RENAME, CONCAT, SLICE, PACK, UNPACK, ADD, SUB, MUL, EDIV, ABS, NEG, LSL, LSR, OR, AND, XOR, NOT, COMPARE, EQ, NEQ, LT, GT, LE, GE, SELF, CONTRACT, TRANSFER_TOKENS, SET_DELEGATE, CREATE_ACCOUNT, CREATE_CONTRACT, CREATE_CONTRACT, IMPLICIT_ACCOUNT, NOW, AMOUNT, BALANCE, CHECK_SIGNATURE, BLAKE, SHA, SHA, HASH_KEY, STEPS_TO_QUOTA, SOURCE, SENDER, ADDRESS, CMPEQ,CMPNEQ,CMPLT,CMPGT,CMPLE,CMPGE, IFEQ,IFNEQ,IFLT,IFGT,IFLE,IFGE, IFCMPEQ,IFCMPNEQ,IFCMPLT,IFCMPGT,IFCMPLE,IFCMPGE, FAIL, ASSERT, ASSERT_EQ,ASSERT_NEQ,ASSERT_LT,ASSERT_LE,ASSERT_GT,ASSERT_GE, ASSERT_CMPEQ,ASSERT_CMPNEQ,ASSERT_CMPLT,ASSERT_CMPLE,ASSERT_CMPGT,ASSERT_CMPGE, ASSERT_NONE,ASSERT_SOME, ASSERT_LEFT,ASSERT_RIGHT, UNPAIR,}, alsoletter={'}, upquote=true, keywordstyle={\bfseries\sffamily\scriptsize}, morekeywords=[2]{ key, unit, signature, option, list, set, operation, address, contract, pair, or, lambda, big_map, map, int, nat, string, bytes, mutez, bool, key_hash,  timestamp, 'a, 'b, 'S, 'p}, keywordstyle=[2]{\bfseries\ttfamily}, classoffset=2, morekeywords=[3]{ storage, parameter, code }, keywordstyle=[3]{\bfseries}, sensitive, comment=[l]\#, literate={->}{{$\rightarrow{}$}}1,backgroundcolor=\color{yellow!50}}[keywords,comments,strings]

*** Albert

#+LaTeX_Header: \lstdefinelanguage{albert}{columns=fullflexible,basicstyle=\tt\footnotesize,commentstyle=\slshape,keywordstyle={\color{red}\sffamily},keywords={\{,\},type, def, dup, drop, car, cdr, match, with, end, assert_some, Some, None, for, map, loop_left, in, do, done, failwith, contract, address, implicit\_account, amount}, alsoletter={'},keywordstyle={\color{purple}\sffamily},morekeywords=[2]{key, unit, signature, option, list, set, operation, address, contract, pair, or, lambda, big_map, map, int, nat, string, bytes, mutez, bool, key_hash, timestamp},keywordstyle=[2]{\color{blue}\ttfamily},classoffset=2,morekeywords=[3]{storage, parameter, code},keywordstyle=[3]{\bfseries},sensitive,comment=[l]\#,morestring=[d]",literate={->}{{$\rightarrow$}}1}[keywords,comments,strings]

** Busproof
#+LaTeX_Header: \usepackage{setspace}
#+LaTeX_header: \usepackage{bussproofs}
#+LaTeX_header: \newcommand{\myUIC}[2]
#+LaTeX_header:   {\mbox{
#+LaTeX_header:      \AxiomC{#1}
#+LaTeX_header:      \UnaryInfC{#2}
#+LaTeX_header:      \DisplayProof}}
#+LaTeX_header: \newcommand{\myBIC}[3]
#+LaTeX_header:   {\mbox{
#+LaTeX_header:      \AxiomC{#1}
#+LaTeX_header:      \AxiomC{#2}
#+LaTeX_header:      \BinaryInfC{#3}
#+LaTeX_header:      \DisplayProof}}
#+LaTeX_header: \newcommand{\myTIC}[4]
#+LaTeX_header:   {\mbox{
#+LaTeX_header:      \AxiomC{#1}
#+LaTeX_header:      \AxiomC{#2}
#+LaTeX_header:      \AxiomC{#3}
#+LaTeX_header:      \TrinaryInfC{#4}
#+LaTeX_header:      \DisplayProof}}
#+LaTeX_header: \newcommand{\mylUIC}[3]
#+LaTeX_header:   {\mbox{
#+LaTeX_header:      \AxiomC{#2}
#+LaTeX_header:      \RightLabel{\scriptsize(#1)}
#+LaTeX_header:      \UnaryInfC{#3}
#+LaTeX_header:      \DisplayProof}}
#+LaTeX_header: \newcommand{\mylBIC}[4]
#+LaTeX_header:   {\mbox{
#+LaTeX_header:      \AxiomC{#2}
#+LaTeX_header:      \AxiomC{#3}
#+LaTeX_header:      \RightLabel{\scriptsize(#1)}
#+LaTeX_header:      \BinaryInfC{#4}
#+LaTeX_header:      \DisplayProof}}
#+LaTeX_header: \newcommand{\mylTIC}[5]
#+LaTeX_header:   {\mbox{
#+LaTeX_header:      \AxiomC{#2}
#+LaTeX_header:      \AxiomC{#3}
#+LaTeX_header:      \AxiomC{#4}
#+LaTeX_header:      \RightLabel{\scriptsize(#1)}
#+LaTeX_header:      \TrinaryInfC{#5}
#+LaTeX_header:      \DisplayProof}}
#+LaTeX_header: \newenvironment{infset}
#+LaTeX_header:   {\begin{center} \setstretch{2.5}}
#+LaTeX_header:   {\end{center}}

** Arrays
#+LaTeX_Header: \newenvironment{leftarray}{\begin{array}{l}}{\end{array}}
#+LaTeX_Header: \newenvironment{leftleftarray}{\begin{array}{ll}}{\end{array}}
#+LaTeX_Header: \newenvironment{leftleftleftarray}{\begin{array}{lll}}{\end{array}}
#+LaTeX_Header: \newenvironment{leftleftxleftarray}{\begin{array}{ll@{}l}}{\end{array}}
#+LaTeX_Header: \newenvironment{leftreducearray}{\begin{array}{l@{~}l@{ }r@{}l}}{\end{array}}

** Tikz
#+LaTeX_header: \usepackage{tikz}


* Introduction

** Who am I

- deducteammate (2012-2016)

- postdoc at IRIF (2016-2018)

- research engineer at Nomadic Labs (2019-?)

- \pause Logipedia contributor (2020-?)

** My PhD in one slide

*** Object-oriented mechanisms for interoperability \newline between proof systems

- FoCaLiZe and Zenon (Modulo) \to Dedukti
  + Focalide, Zenonide, Sukerujo

- operational semantics of an object-oriented calculus
  + Sigmaid, Meta Dedukti

- ITP interoperability methodology
  + automated theorem transfer
  + manual concept alignment in FoCaLiZe
  + no backward translation (final proof in Dedukti)
  + case study HOL and Coq on the sieve of Eratosthenes

- heuristic constructivisation of Zenon proofs


* 
#+BEGIN_EXPORT latex
\setbeamertemplate{background canvas}{\parbox[c][11cm][c]{\paperwidth}{\centering\begin{tikzpicture}[opacity=0.1]\node[opacity=0.1] {\includegraphics[width=.7\linewidth]{../LogoNL.jpg}};\end{tikzpicture}}}
#+END_EXPORT
** 
** Nomadic Labs

https://nomadic-labs.com

- parisian start-up

- 35 permanent employees

  22 with a PhD in formal methods or programming languages

- R&D on the Tezos blockchain

- close to Inria and academia in general

- dedicated to free software

** Blockchains

Blockchains are:

- linked lists where link = crypto hash

- distributed databases: each node
  + stores everything
  + validates new blocks
  + communicates toward consensus

- public ledgers for crypto-currencies

* 

#+BEGIN_EXPORT latex
\usebackgroundtemplate{\parbox[c][11cm][c]{\paperwidth}{\centering\begin{tikzpicture}[opacity=0.1]\input{../logo_tezos.tikz}\end{tikzpicture}}}
#+END_EXPORT
** 

** Tezos

https://tezos.com

https://tezos.gitlab.io

- in OCaml

- liquid proof of stake

- on-chain governance

- formal methods

** Smart Contracts

In practice, we want our crypto-currency accounts to be programmable:

- spending limits, access control
- \pause votes, auctions, crowdfunding, timestamping, insurance, video games, etc…

\pause These programs are called *smart contracts*

** What is contractual about smart contracts?

Once deployed, a smart contract's code:
- is public
- cannot change

\pause we commit today on what we will do (and pay) in the future

** The exploit of the Decentralized Autonomous Organisation

the DAO:
- a venture capital fund implemented as an Ethereum smart contract
- broke the crowdfunding world record
  - 15% of all Ethereum tokens (about 150 M$)
- \pause hacked in 2016
  - lead to a hard fork of the Ethereum blockchain

** Smart contract verification

validating the chain $\Rightarrow$ running all the smart contracts
- smart contracts are necessarily small!

\pause Perfect set-up for formal methods

Let's verify them!

** Michelson: the smart contract language in Tezos

   https://michelson.nomadic-labs.com

- small stack-based Turing-complete language

- designed with software verification in mind:
  + static typing
  + clear documentation (syntax, typing, semantics)
  + failure is explicit
    * integers do not overflow
    * division returns an option

- implemented using an OCaml GADT
  + subject reduction for free

** Michelson example: vote

#+BEGIN_SRC michelson
  storage (map string int);
  parameter string;
  code {
         # Check that at least 5tz have been sent
         AMOUNT;
         PUSH mutez 5000000; COMPARE; GT; IF { FAIL } {};

         # Pair and stack manipulation
         DUP; DIP { CDR; DUP }; CAR; DUP;

         DIP { # Get the number of votes for the chosen option
               GET; IF_NONE { FAIL } {};
               # Increment
               PUSH int 1; ADD; SOME };
         UPDATE;
         NIL operation; PAIR
       }
#+END_SRC

* Michelson in Coq
#+BEGIN_EXPORT latex
\setbeamertemplate{background canvas}{\parbox[c][11cm][c]{\paperwidth}{\centering\begin{tikzpicture}[opacity=0.1]\node[opacity=0.1] {\includegraphics[width=.7\linewidth]{../logo_michocoq.png}};\end{tikzpicture}}}
#+END_EXPORT

** 
** Mi-Cho-Coq

https://gitlab.com/nomadic-labs/mi-cho-coq/

Deep embedding in Coq of the Michelson language

- lexer, Menhir parser, macro expander, type checker, evaluator, pretty-printer


** Syntax: Types

#+BEGIN_SRC coq
Inductive comparable_type : Set :=
| nat | int | string | bytes | bool
| mutez | address | key_hash | timestamp.

Inductive type : Set :=
| Comparable_type (_ : comparable_type)
| unit | key | signature | operation
| option (_ : type) | list (_ : type)
| set (_ : comparable_type) | contract (_  : type)
| pair (_ _ : type) | or (_ _ : type)
| lambda (_ _ : type)
| map (_ : comparable_type) (_ : type).

Coercion Comparable_type : comparable_type >-> type.

Definition stack_type := Datatypes.list type.
#+END_SRC

** Syntax: Instructions

#+BEGIN_SRC coq
Inductive instruction : stack_type -> stack_type -> Set :=
| FAILWITH {A B a} : instruction (a :: A) B
| SEQ {A B C} : instruction A B -> instruction B C ->
                instruction A C
| IF {A B} : instruction A B -> instruction A B ->
             instruction (bool :: A) B
| LOOP {A} : instruction A (bool :: A) ->
             instruction (bool :: A) A
| COMPARE {a : comparable_type} {S} :
          instruction (a :: a :: S) (int :: S)
| ADD_nat {S} : instruction (nat :: nat :: S) (nat :: S)
| ADD_int {S} : instruction (int :: int :: S) (int :: S)
| ….
#+END_SRC

** Semantics
#+BEGIN_SRC coq
  Fixpoint eval {A B : stack_type}
        (i : instruction A B) : stack A -> stack B :=
      match i in instruction A B
        return stack A -> stack B with
      | FAILWITH x =>
         ...
      | SEQ i1 i2 =>
         fun SA => eval i2 (eval i1 SA)
      | IF bt bf =>
         fun SbA => let (b, SA) := SbA in
           if b then eval bt SA else eval bf SA
      | LOOP body =>
         fun SbA => let (b, SA) := SbA in
           if b then eval (SEQ body (LOOP body)) SA
           else SA
      ...
#+END_SRC

** Semantics
#+BEGIN_SRC coq
  Fixpoint eval {A B : stack_type}
        (i : instruction A B) : stack A -> M (stack B) :=
      match i in instruction A B
        return stack A -> M (stack B) with
      | FAILWITH x =>
         fun SA => Failed _ (Assertion_Failure _ x)
      | SEQ i1 i2 =>
         fun SA => bind (eval i2) (eval i1 SA)
      | IF bt bf =>
         fun SbA => let (b, SA) := SbA in
           if b then eval bt SA else eval bf SA
      | LOOP body =>
         fun SbA => let (b, SA) := SbA in
           if b then eval (SEQ body (LOOP body)) SA
           else Return _ SA
      ...
#+END_SRC

** Semantics
#+BEGIN_SRC coq
  Fixpoint eval {A B : stack_type}
        (i : instruction A B) (fuel : nat)
        {struct fuel} : stack A -> M (stack B) :=
    match fuel with
    | 0 => fun SA => Failed _ Out_of_fuel
    | S n =>
      match i in instruction A B
        return stack A -> M (stack B) with
      | FAILWITH x =>
         fun _ => Failed _ (Assertion_Failure _ x)
      | SEQ i1 i2 =>
         fun SA => bind (eval i2 n) (eval i1 n SA)
      | IF bt bf =>
         ...
      | LOOP body =>
         ...
#+END_SRC

** Verification

#+BEGIN_SRC coq
  Definition correct_smart_contract {A B : stack_type}
    (i : instruction A B) min_fuel spec : Prop :=
    forall (input : stack A) (output : stack B) fuel,
      fuel >= min_fuel input ->
      eval i fuel input = Return (stack B) output <->
        spec input output.
#+END_SRC

\pause Full functional verification: we characterize the successful runs of
the contract.

** Computing weakest precondition

#+BEGIN_SRC coq
  Fixpoint wp {A B} (i : instruction A B) fuel
    (psi : stack B -> Prop) : (stack A -> Prop) :=
    match fuel with
    | 0 => fun _ => False
    | S fuel =>
       match i with
       | FAILWITH => fun _ => false
       | SEQ B C => wp B fuel (wp C fuel psi)
       | IF bt bf => fun '(b, SA) =>
           if b then wp bt fuel psi SA
           else wp bf fuel psi SA
       | LOOP body => fun '(b, SA) =>
           if b then wp (SEQ body (LOOP body)) fuel psi SA
           else psi SA
       | …
#+END_SRC

** Computing weakest precondition

#+BEGIN_SRC coq
  Lemma wp_correct {A B} (i : instruction A B)
    fuel psi st :
    wp i fuel psi st <->
      exists output,
        eval i fuel st = Return _ output /\ psi output.
  Proof. … Qed.
#+END_SRC

** Verified smart contracts

- vote example

- default "manager" smart contract

- multisig

  + $n$ persons share the ownership of the contract.

  + they agree on a threshold $t$ (an integer).

  + to do anything with the contract, at least $t$ owners must agree.

  + possible actions:
    + transfer from the multisig contract to somewhere else
    + change the list of owners and the threshold

- spending limit

  + two roles: *admin* and *user*
  + *user* can spend the contract's tokens up-to a stored limit
  + *admin* can change the limit and authentication keys

* Albert
#+BEGIN_EXPORT latex
\setbeamertemplate{background canvas}{\parbox[c][11cm][c]{\paperwidth}{\centering\begin{tikzpicture}[opacity=0.1]\node[opacity=0.1] {\includegraphics[width=.7\linewidth]{../logo_albert.png}};\end{tikzpicture}}}
#+END_EXPORT
** 

** High level smart contract languages

Many languages compiled to Michelson:
- Ligo, SmartPy, Fi, Archetype, Morley, Juvix, SCaml, Liquidity, lamtez, \ldots

\pause no certified compiler

** The Albert intermediate language

https://albert-lang.io

 


Goals:

- common suffix of most compilers to Michelson
- optimizing
- certified

Choices:

- abstract the stack
- \pause and not much more

** Type system

- same types as Michelson + \(n\)-ary variants and records

- explicit duplication

- explicit consumption

- implicit ordering

\pause *linear* type system

** Example: vote in Albert

#+BEGIN_SRC albert
type storage_ty = { threshold : mutez; votes: map string nat }

def vote :
  { param : string ; store : storage_ty }  ->
  { operations : list operation ; store : storage_ty } =
      {votes = state; threshold = threshold } = store ;
      (state0, state1) = dup state; 
      (param0, param1) = dup param;
      prevote_option = state0[param0];
      { res = prevote } = assert_some { opt = prevote_option };
      one = 1; postvote = prevote + one; postvote = Some postvote;
      final_state =  update state1 param1 postvote;
      store = {threshold = threshold; votes = final_state};
      operations = ([] : list operation)
#+END_SRC

** Example: vote in Albert

#+BEGIN_SRC albert
def guarded_vote :
  { param : string ; store : storage_ty } ->
  { operations : list operation ; store : storage_ty } =
    (store0, store1) = dup store;
    threshold = store0.threshold;
    am = amount;
    ok = am >= threshold0;
    match ok with
        False f -> failwith "you are so cheap!"
      | True  t -> drop t;
          voting_parameters = { param = param ; store = store1 };
          vote voting_parameters
    end
#+END_SRC

** Ott specification

- syntax, typing, and semantics specified in Ott

- modular specification (one file per language construction)


- from one source
  + OCaml AST
  + Menhir parser
  + Coq AST, typing, and semantic relations
  + \LaTeX{} documentation

** Compiler

- compiler written in Coq, certification in progress

- compiler target = Mi-Cho-Coq untyped AST

- proved optimisations at the Michelson level

** Compiler pipeline

- inlining of type definitions
- sorting of record labels and variant constructors
- type checking
- function inlining + translation to Michelson

** Meta theory

Subject reduction and progress proved on a fragment

\[(\Gamma \vdash instr : ty \rightarrow ty') \Rightarrow (\Gamma \vdash v : ty) \Rightarrow (E \models instr / v \Rightarrow v') \Rightarrow (\Gamma \vdash v : ty')\]

\[(\Gamma \vdash instr : ty \rightarrow ty') \Rightarrow (\Gamma \vdash v : ty) \Rightarrow (\exists v', E \models instr / v \Rightarrow v')\]

* Conclusion
** Conclusion

- The Michelson smart-contract language is formalized in Coq.

- This formalisation can be used to prove interesting Michelson smart-contracts

- and for certified compilation.

** Ongoing and Future Work

- on Mi-Cho-Coq

  - formalize the Michelson cost model, contract life, mutual and recursive calls

  - prove smart contracts for other applications (security, finance, economy, \ldots)

  - prove equivalence between Mi-Cho-Coq and Michelson reference implementation

- on Albert

  - prove meta theory

  - improve and certify the compiler

#+BEGIN_EXPORT latex
\end{frame}
\setbeamertemplate{background canvas}{\parbox[c][11cm][c]{\paperwidth}{\centering\begin{tikzpicture}\node[opacity=0.1] {\includegraphics[width=.7\linewidth]{../logo_pile_qui_chante.png}};\end{tikzpicture}}}
\begin{frame}{Thank you!}
\begin{Huge}
\begin{center}
Questions?
\end{center}
\end{Huge}
#+END_EXPORT
